# -*- coding: utf-8 -*-
"""Task 1 Solution.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Km3YtcoQNFWdFQBc0cCzxc_5JX3NnNaF
"""

# Install necessary tools
!apt-get -qq update  # Update package list for apt-get
!apt-get -qq install samtools bcftools freebayes  # Install required tools: samtools, bcftools, and freebayes

# Upload BAM files and ROI.bed
from google.colab import files  # Import the file upload module from Colab
uploaded = files.upload()  # Prompt user to upload files

# List of uploaded files
import os  # Import os module for file operations
uploaded_files = os.listdir('.')  # List all files in the current directory
bam_files = [f for f in uploaded_files if f.endswith('.bam')]  # Filter for BAM files
bed_files = [f for f in uploaded_files if f.endswith('.bed')]  # Filter for BED files

# Download GRCh38-p10 reference genome
!wget https://ftp.ensembl.org/pub/release-104/fasta/homo_sapiens/dna/Homo_sapiens.GRCh38.dna.primary_assembly.fa.gz -O GRCh38_p10.fa.gz  # Download the GRCh38-p10 reference genome
!gunzip GRCh38_p10.fa.gz  # Decompress the downloaded genome file
!samtools faidx GRCh38_p10.fa  # Create an index for the reference genome using samtools

# Reference genome
ref = 'GRCh38_p10.fa'  # Define the reference genome file name

# ROI bed file
if bed_files:  # Check if any BED file was uploaded
    roi_bed = bed_files[0]  # Use the first BED file
else:
    print("No BED file uploaded.")  # Notify the user if no BED file is available
    roi_bed = ''  # Set roi_bed to an empty string

# Read ROI.bed and construct regions list
regions = []  # Initialize an empty list to store regions
with open(roi_bed, 'r') as bed:  # Open the BED file for reading
    for line in bed:  # Iterate over each line in the BED file
        parts = line.strip().split()  # Split the line into columns
        chrom, start, end = parts[0], parts[1], parts[2]  # Extract chromosome, start, and end positions
        regions.append(f"{chrom}:{start}-{end}")  # Add the region in "chrom:start-end" format to the list

# Process each BAM file
for bam_file in bam_files:  # Iterate over each BAM file
    sample_name = bam_file.replace('.bam', '')  # Extract sample name by removing the ".bam" extension
    vcf_file = f'{sample_name}_variants.vcf'  # Define output VCF file name

    # Build the command with all regions
    command = f'freebayes -f {ref}'  # Start building the freebayes command with the reference genome
    for region in regions:  # Add each region to the command
        command += f' --region {region}'
    command += f' {bam_file} > {vcf_file}'  # Add the BAM file and specify the output VCF file

    # Call variants using freebayes
    !{command}  # Execute the constructed command

    print(f'Variants for {sample_name} saved to {vcf_file}')  # Notify the user about the saved VCF file

# View the output VCF files
for bam_file in bam_files:  # Iterate over each BAM file
    sample_name = bam_file.replace('.bam', '')  # Extract sample name
    vcf_file = f'{sample_name}_variants.vcf'  # Define the corresponding VCF file
    !head $vcf_file  # Display the first few lines of the VCF file

# View variants as table format
# Install necessary Python libraries
!pip install pandas  # Install pandas library for data manipulation

import pandas as pd  # Import pandas for handling tabular data

# Function to parse VCF file into a Pandas DataFrame
def parse_vcf(vcf_file):
    data = []  # Initialize an empty list to store VCF records
    with open(vcf_file, 'r') as vcf:  # Open the VCF file for reading
        for line in vcf:  # Iterate over each line in the VCF file
            if line.startswith('#'):  # Skip header lines
                continue
            columns = line.strip().split('\t')  # Split the line into columns
            chrom, pos, id_, ref, alt, qual, filter_, info = columns[:8]  # Extract relevant columns
            data.append({
                'CHROM': chrom,  # Chromosome
                'POS': pos,  # Position
                'ID': id_,  # Variant ID
                'REF': ref,  # Reference allele
                'ALT': alt,  # Alternate allele
                'QUAL': qual,  # Quality score
                'FILTER': filter_,  # Filter status
                'INFO': info  # Additional information
            })
    return pd.DataFrame(data)  # Convert the list of records into a DataFrame

# Process each VCF file and display as a table
for bam_file in bam_files:  # Iterate over each BAM file
    sample_name = bam_file.replace('.bam', '')  # Extract sample name
    vcf_file = f'{sample_name}_variants.vcf'  # Define the corresponding VCF file

    print(f'\nDisplaying variants for {sample_name}:')  # Notify the user about the sample being displayed

    # Parse VCF file and display as a table
    vcf_table = parse_vcf(vcf_file)  # Parse the VCF file into a DataFrame
    display(vcf_table)  # Display the DataFrame in tabular format

# Download the VCF files
for bam_file in bam_files:  # Iterate over each BAM file
    sample_name = bam_file.replace('.bam', '')  # Extract sample name
    vcf_file = f'{sample_name}_variants.vcf'  # Define the corresponding VCF file
    files.download(vcf_file)  # Prompt user to download the VCF file